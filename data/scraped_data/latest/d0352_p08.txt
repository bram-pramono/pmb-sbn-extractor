% We don't even need to build the boat, the native villagers have plenty that would do.


[]

% Sequence Box Notation

%SBN% person.n.01   Sub speaker               % We                 [0-2]
%SBN%               NEGATION &lt;1               %                    
%SBN%               NECESSITY &lt;1              %                    
%SBN% time.n.08     EQU now                   % do --n't--  --even--  --need--  --to-- [3-21]
%SBN% build.v.01    Agent -2 Time -1 Theme +1 % build              [22-27]
%SBN% boat.n.01                               %  --the-- boat --,--          [28-37]
%SBN%               CONTINUATION &lt;1           %                    
%SBN% native.n.01   AttributeOf +1            %  --the-- native         [38-48]
%SBN% person.n.01   Role +1                   % villagers          [49-58]
%SBN% villager.n.01                           %                    
%SBN% have.v.01     Pivot -2 Theme +1         % have               [59-63]
%SBN% measure.n.02  Quantity +                % plenty             [64-70]
%SBN% time.n.08     TSU now                   %  --that-- would         [71-81]
%SBN% do.v.07       Theme -2 Time -1          % do --.--                [82-85]

% Incremental DRS

tokens:We
sem: λv1.(<b1>['b1←x1']:['b1←person:person.n.01(x1)','b1←Sub(x1,speaker)']</b1>;(v1@x1))
cat: NP
----------
tokens:do
sem: λv1.λv2.λv3.((v1@v2)@λv4.(<b2>['b1←t1']:['b1←time:time.n.08(t1)','b1←t1=now','b2←Time(v4,t1)']</b2>;(v3@v4)))
cat: (S[dcl]\NP)/(S[b]\NP)
----------
tokens:n't
sem: λv1.λv2.λv3.(v2@λv4.<b1>[]:['b1←¬((v1@λv5.(v5@v4))@v3)']</b1>)
cat: (S\NP)\(S\NP)
----------
tokens:even
sem: λv1.v1
cat: (S\NP)\(S\NP)
----------
tokens:need
sem: λv1.λv2.λv3.(v2@λv4.<b1>[]:['b1←□((v1@λv5.(v5@v4))@v3)']</b1>)
cat: (S[b]\NP)/(S[to]\NP)
----------
tokens:to
sem: λv1.v1
cat: (S[to]\NP)/(S[b]\NP)
----------
tokens:build
sem: λv1.λv2.λv3.(v2@λv4.(v1@λv5.(<b1>['b1←e1']:['b1←build:build.v.01(e1)','b1←Theme(e1,v5)','b1←Agent(e1,v4)']</b1>;(v3@e1))))
cat: (S[b]\NP)/NP
----------
tokens:the
sem: λv1.λv2.((<b1>['b1←x1']:[]</b1>;(v1@x1))∗(v2@x1))
cat: NP/N
----------
tokens:boat
sem: λv1.<b1>[]:['b1←boat:boat.n.01(v1)']</b1>
cat: N
----------
tokens:,
sem: λv1.λv2.λv3.<>[]:[]</>
cat: conj
----------
tokens:the
sem: λv1.λv2.((<b1>['b1←x1']:[]</b1>;(v1@x1))∗(v2@x1))
cat: NP/N
----------
tokens:native
sem: λv1.λv2.(<b1>['b1←x1']:['b1←native:native.n.01(x1)','b1←AttributeOf(x1,v2)']</b1>;(v1@v2))
cat: N/N
----------
tokens:villagers
sem: λv1.<b1>['b1←x1']:['b1←villager:villager.n.01(x1)','b1←person:person.n.01(v1)','b1←Role(v1,x1)']</b1>
cat: N
----------
tokens:have
sem: λv1.λv2.λv3.(v2@λv4.(v1@λv5.(<b1>['b1←e1']:['b1←have:have.v.01(e1)','b1←Theme(e1,v5)','b1←Pivot(e1,v4)']</b1>;(v3@e1))))
cat: (S[dcl]\NP)/NP
----------
tokens:ø
sem: λv1.λv2.(<b1>['b1←x1']:[]</b1>;((v1@x1);(v2@x1)))
cat: NP/N
----------
tokens:plenty
sem: λv1.<b1>[]:['b1←measure:measure.n.02(v1)','b1←Quantity(v1,+)']</b1>
cat: N
----------
tokens:that
sem: λv1.λv2.λv3.((v2@v3);((v1@λv4.(v4@v3))@λv5.<b1>[]:[]</b1>))
cat: (N\N)/(S[dcl]\NP)
----------
tokens:would
sem: λv1.λv2.λv3.((v1@v2)@λv4.(<b2>['b1←t1']:['b1←time:time.n.08(t1)','b1←t1≻now','b2←Time(v4,t1)']</b2>;(v3@v4)))
cat: (S[dcl]\NP)/(S[b]\NP)
----------
tokens:do
sem: λv1.λv2.(v1@λv3.(<b1>['b1←e1']:['b1←do:do.v.07(e1)','b1←Theme(e1,v3)']</b1>;(v2@e1)))
cat: S[b]\NP
----------
tokens:.
sem: λv1.v1
cat: S[dcl]\S[dcl]
----------
